:ЖЖ#!/bin/bash

# ANSI color codes and emoji for readability
GREEN=$(tput setaf 2)   # 🟢
YELLOW=$(tput setaf 3)  # 🟡
RED=$(tput setaf 1)     # 🔴
RESET=$(tput sgr0)      # 🔄

# Function to display loading animation (with cleanup)
function loading_animation() {
    local pid=$!
    local delay=0.15
    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'

    while ps -p $pid >/dev/null; do # <-- Using ps with -p and the PID
        local temp=${spin#?}
        printf " [%c] " "$spin"
        local spin=$temp${spin%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done

    printf "    \b\b\b\b"
}


# Function for more robust validation check 
function validate_input() {
  if [[ -z "$1" ]]; then
    echo "${RED}⚠️  $2${RESET}"
    return 1
  fi
}

# Function to check if a user already exists
function user_exists() {
  id -u "$1" >/dev/null 2>&1
}

# ********** Main Script ********** 
printf "${GREEN}🌟 Starting user setup...${RESET}\n" 

# Get login (with validation)
while true; do
  read -p "${YELLOW}🔑 Enter login: ${RESET}" login 
  validate_input "$login" "Login cannot be empty. Please try again." || continue

  if user_exists "$login"; then
    echo "${YELLOW}⚠️ User $login already exists. Please choose a different username.${RESET}"
  else 
    break  # Valid login provided
  fi
done

# Get password (with confirmation)
while true; do
  read -sp "${YELLOW}🔒 Enter password: ${RESET}" password 
  echo
  read -sp "${YELLOW}🔒 Confirm password: ${RESET}" password_confirm 
  echo

  if [[ "$password" == "$password_confirm" ]]; then
    break
  else
    echo "${RED}⚠️ Passwords do not match. Please try again.${RESET}"
  fi
done

# Get SSH public key path (with validation)
while true; do
  read -ep "${YELLOW}🔑 Enter path of SSH public key: ${RESET}" ssh_pub_path 
  validate_input "$ssh_pub_path" "SSH public key path cannot be empty. Please try again." || continue

  if [[ -f "$ssh_pub_path" ]]; then
    break
  else
    echo "${RED}⚠️ SSH public key file not found. Please check the path and try again.${RESET}"
  fi
done

printf "${GREEN}🚀 Creating user directories and setting up SSH...${RESET}\n" 

homedir="/home/$login" 
ssh_dir="$homedir/.ssh" 

# Use sudo for privileged operations, prompting for password as needed
if ! sudo useradd -d "$homedir" -s /bin/bash "$login"; then
  echo "${RED}⚠️ User creation failed. Please run with elevated privileges.${RESET}"
  exit 1
fi

sudo mkdir -p "$ssh_dir" &> /dev/null  # Create directories (quietly)
sudo cp "$ssh_pub_path" "$ssh_dir/authorized_keys" &> /dev/null
sudo cp -rT /etc/skel "$homedir" &> /dev/null
sudo chown -R "$login:$login" "$homedir"
echo "$login:$password" | sudo chpasswd 

# Background the loading animation, get PID
loading_animation &
loading_pid=$!

# Sleep briefly to simulate actual work being done 
sleep 2  

# Kill the animation process now that simulated work is "done"
sudo kill -9 $loading_pid >/dev/null 2>&1 

printf "${GREEN}✅ User setup completed successfully!${RESET}\n" 
printf "${GREEN}🎉 Enjoy your new user account, $login!${RESET}\n" 

